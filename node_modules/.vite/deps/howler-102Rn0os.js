import { __commonJS } from "./chunk-B4p5S3KX.js";

//#region node_modules/@splinetool/runtime/build/howler.js
var require_howler = /* @__PURE__ */ __commonJS({ "node_modules/@splinetool/runtime/build/howler.js": ((exports) => {
	/*! howler.js v2.2.3 | (c) 2013-2020, James Simpson of GoldFire Studios | MIT License | howlerjs.com */
	(function() {
		var e = function() {
			this.init();
		};
		e.prototype = {
			init: function() {
				var e$1 = this || n;
				return e$1._counter = 1e3, e$1._html5AudioPool = [], e$1.html5PoolSize = 10, e$1._codecs = {}, e$1._howls = [], e$1._muted = !1, e$1._volume = 1, e$1._canPlayEvent = "canplaythrough", e$1._navigator = "undefined" != typeof window && window.navigator ? window.navigator : null, e$1.masterGain = null, e$1.noAudio = !1, e$1.usingWebAudio = !0, e$1.autoSuspend = !0, e$1.ctx = null, e$1.autoUnlock = !0, e$1._setup(), e$1;
			},
			volume: function(e$1) {
				var o$1 = this || n;
				if (e$1 = parseFloat(e$1), o$1.ctx || _(), void 0 !== e$1 && e$1 >= 0 && e$1 <= 1) {
					if (o$1._volume = e$1, o$1._muted) return o$1;
					o$1.usingWebAudio && o$1.masterGain.gain.setValueAtTime(e$1, n.ctx.currentTime);
					for (var t$1 = 0; t$1 < o$1._howls.length; t$1++) if (!o$1._howls[t$1]._webAudio) for (var r$1 = o$1._howls[t$1]._getSoundIds(), a$1 = 0; a$1 < r$1.length; a$1++) {
						var u$1 = o$1._howls[t$1]._soundById(r$1[a$1]);
						u$1 && u$1._node && (u$1._node.volume = u$1._volume * e$1);
					}
					return o$1;
				}
				return o$1._volume;
			},
			mute: function(e$1) {
				var o$1 = this || n;
				o$1.ctx || _(), o$1._muted = e$1, o$1.usingWebAudio && o$1.masterGain.gain.setValueAtTime(e$1 ? 0 : o$1._volume, n.ctx.currentTime);
				for (var t$1 = 0; t$1 < o$1._howls.length; t$1++) if (!o$1._howls[t$1]._webAudio) for (var r$1 = o$1._howls[t$1]._getSoundIds(), a$1 = 0; a$1 < r$1.length; a$1++) {
					var u$1 = o$1._howls[t$1]._soundById(r$1[a$1]);
					u$1 && u$1._node && (u$1._node.muted = !!e$1 || u$1._muted);
				}
				return o$1;
			},
			stop: function() {
				for (var e$1 = this || n, o$1 = 0; o$1 < e$1._howls.length; o$1++) e$1._howls[o$1].stop();
				return e$1;
			},
			unload: function() {
				for (var e$1 = this || n, o$1 = e$1._howls.length - 1; o$1 >= 0; o$1--) e$1._howls[o$1].unload();
				return e$1.usingWebAudio && e$1.ctx && void 0 !== e$1.ctx.close && (e$1.ctx.close(), e$1.ctx = null, _()), e$1;
			},
			codecs: function(e$1) {
				return (this || n)._codecs[e$1.replace(/^x-/, "")];
			},
			_setup: function() {
				var e$1 = this || n;
				if (e$1.state = e$1.ctx ? e$1.ctx.state || "suspended" : "suspended", e$1._autoSuspend(), !e$1.usingWebAudio) if ("undefined" != typeof Audio) try {
					var o$1 = new Audio();
					void 0 === o$1.oncanplaythrough && (e$1._canPlayEvent = "canplay");
				} catch (n$1) {
					e$1.noAudio = !0;
				}
				else e$1.noAudio = !0;
				try {
					var o$1 = new Audio();
					o$1.muted && (e$1.noAudio = !0);
				} catch (e$2) {}
				return e$1.noAudio || e$1._setupCodecs(), e$1;
			},
			_setupCodecs: function() {
				var e$1 = this || n, o$1 = null;
				try {
					o$1 = "undefined" != typeof Audio ? new Audio() : null;
				} catch (n$1) {
					return e$1;
				}
				if (!o$1 || "function" != typeof o$1.canPlayType) return e$1;
				var t$1 = o$1.canPlayType("audio/mpeg;").replace(/^no$/, ""), r$1 = e$1._navigator ? e$1._navigator.userAgent : "", a$1 = r$1.match(/OPR\/([0-6].)/g), u$1 = a$1 && parseInt(a$1[0].split("/")[1], 10) < 33, d$1 = -1 !== r$1.indexOf("Safari") && -1 === r$1.indexOf("Chrome"), i$1 = r$1.match(/Version\/(.*?) /), _$1 = d$1 && i$1 && parseInt(i$1[1], 10) < 15;
				return e$1._codecs = {
					mp3: !(u$1 || !t$1 && !o$1.canPlayType("audio/mp3;").replace(/^no$/, "")),
					mpeg: !!t$1,
					opus: !!o$1.canPlayType("audio/ogg; codecs=\"opus\"").replace(/^no$/, ""),
					ogg: !!o$1.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
					oga: !!o$1.canPlayType("audio/ogg; codecs=\"vorbis\"").replace(/^no$/, ""),
					wav: !!(o$1.canPlayType("audio/wav; codecs=\"1\"") || o$1.canPlayType("audio/wav")).replace(/^no$/, ""),
					aac: !!o$1.canPlayType("audio/aac;").replace(/^no$/, ""),
					caf: !!o$1.canPlayType("audio/x-caf;").replace(/^no$/, ""),
					m4a: !!(o$1.canPlayType("audio/x-m4a;") || o$1.canPlayType("audio/m4a;") || o$1.canPlayType("audio/aac;")).replace(/^no$/, ""),
					m4b: !!(o$1.canPlayType("audio/x-m4b;") || o$1.canPlayType("audio/m4b;") || o$1.canPlayType("audio/aac;")).replace(/^no$/, ""),
					mp4: !!(o$1.canPlayType("audio/x-mp4;") || o$1.canPlayType("audio/mp4;") || o$1.canPlayType("audio/aac;")).replace(/^no$/, ""),
					weba: !(_$1 || !o$1.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, "")),
					webm: !(_$1 || !o$1.canPlayType("audio/webm; codecs=\"vorbis\"").replace(/^no$/, "")),
					dolby: !!o$1.canPlayType("audio/mp4; codecs=\"ec-3\"").replace(/^no$/, ""),
					flac: !!(o$1.canPlayType("audio/x-flac;") || o$1.canPlayType("audio/flac;")).replace(/^no$/, "")
				}, e$1;
			},
			_unlockAudio: function() {
				var e$1 = this || n;
				if (!e$1._audioUnlocked && e$1.ctx) {
					e$1._audioUnlocked = !1, e$1.autoUnlock = !1, e$1._mobileUnloaded || 44100 === e$1.ctx.sampleRate || (e$1._mobileUnloaded = !0, e$1.unload()), e$1._scratchBuffer = e$1.ctx.createBuffer(1, 1, 22050);
					var o$1 = function(n$1) {
						for (; e$1._html5AudioPool.length < e$1.html5PoolSize;) try {
							var t$1 = new Audio();
							t$1._unlocked = !0, e$1._releaseHtml5Audio(t$1);
						} catch (n$2) {
							e$1.noAudio = !0;
							break;
						}
						for (var r$1 = 0; r$1 < e$1._howls.length; r$1++) if (!e$1._howls[r$1]._webAudio) for (var a$1 = e$1._howls[r$1]._getSoundIds(), u$1 = 0; u$1 < a$1.length; u$1++) {
							var d$1 = e$1._howls[r$1]._soundById(a$1[u$1]);
							d$1 && d$1._node && !d$1._node._unlocked && (d$1._node._unlocked = !0, d$1._node.load());
						}
						e$1._autoResume();
						var i$1 = e$1.ctx.createBufferSource();
						i$1.buffer = e$1._scratchBuffer, i$1.connect(e$1.ctx.destination), void 0 === i$1.start ? i$1.noteOn(0) : i$1.start(0), "function" == typeof e$1.ctx.resume && e$1.ctx.resume(), i$1.onended = function() {
							i$1.disconnect(0), e$1._audioUnlocked = !0, document.removeEventListener("touchstart", o$1, !0), document.removeEventListener("touchend", o$1, !0), document.removeEventListener("click", o$1, !0), document.removeEventListener("keydown", o$1, !0);
							for (var n$2 = 0; n$2 < e$1._howls.length; n$2++) e$1._howls[n$2]._emit("unlock");
						};
					};
					return document.addEventListener("touchstart", o$1, !0), document.addEventListener("touchend", o$1, !0), document.addEventListener("click", o$1, !0), document.addEventListener("keydown", o$1, !0), e$1;
				}
			},
			_obtainHtml5Audio: function() {
				var e$1 = this || n;
				if (e$1._html5AudioPool.length) return e$1._html5AudioPool.pop();
				var o$1 = new Audio().play();
				return o$1 && "undefined" != typeof Promise && (o$1 instanceof Promise || "function" == typeof o$1.then) && o$1.catch(function() {
					console.warn("HTML5 Audio pool exhausted, returning potentially locked audio object.");
				}), new Audio();
			},
			_releaseHtml5Audio: function(e$1) {
				var o$1 = this || n;
				return e$1._unlocked && o$1._html5AudioPool.push(e$1), o$1;
			},
			_autoSuspend: function() {
				var e$1 = this;
				if (e$1.autoSuspend && e$1.ctx && void 0 !== e$1.ctx.suspend && n.usingWebAudio) {
					for (var o$1 = 0; o$1 < e$1._howls.length; o$1++) if (e$1._howls[o$1]._webAudio) {
						for (var t$1 = 0; t$1 < e$1._howls[o$1]._sounds.length; t$1++) if (!e$1._howls[o$1]._sounds[t$1]._paused) return e$1;
					}
					return e$1._suspendTimer && clearTimeout(e$1._suspendTimer), e$1._suspendTimer = setTimeout(function() {
						if (e$1.autoSuspend) {
							e$1._suspendTimer = null, e$1.state = "suspending";
							var n$1 = function() {
								e$1.state = "suspended", e$1._resumeAfterSuspend && (delete e$1._resumeAfterSuspend, e$1._autoResume());
							};
							e$1.ctx.suspend().then(n$1, n$1);
						}
					}, 3e4), e$1;
				}
			},
			_autoResume: function() {
				var e$1 = this;
				if (e$1.ctx && void 0 !== e$1.ctx.resume && n.usingWebAudio) return "running" === e$1.state && "interrupted" !== e$1.ctx.state && e$1._suspendTimer ? (clearTimeout(e$1._suspendTimer), e$1._suspendTimer = null) : "suspended" === e$1.state || "running" === e$1.state && "interrupted" === e$1.ctx.state ? (e$1.ctx.resume().then(function() {
					e$1.state = "running";
					for (var n$1 = 0; n$1 < e$1._howls.length; n$1++) e$1._howls[n$1]._emit("resume");
				}), e$1._suspendTimer && (clearTimeout(e$1._suspendTimer), e$1._suspendTimer = null)) : "suspending" === e$1.state && (e$1._resumeAfterSuspend = !0), e$1;
			}
		};
		var n = new e(), o = function(e$1) {
			var n$1 = this;
			if (!e$1.src || 0 === e$1.src.length) return void console.error("An array of source files must be passed with any new Howl.");
			n$1.init(e$1);
		};
		o.prototype = {
			init: function(e$1) {
				var o$1 = this;
				return n.ctx || _(), o$1._autoplay = e$1.autoplay || !1, o$1._format = "string" != typeof e$1.format ? e$1.format : [e$1.format], o$1._html5 = e$1.html5 || !1, o$1._muted = e$1.mute || !1, o$1._loop = e$1.loop || !1, o$1._pool = e$1.pool || 5, o$1._preload = "boolean" != typeof e$1.preload && "metadata" !== e$1.preload || e$1.preload, o$1._rate = e$1.rate || 1, o$1._sprite = e$1.sprite || {}, o$1._src = "string" != typeof e$1.src ? e$1.src : [e$1.src], o$1._volume = void 0 !== e$1.volume ? e$1.volume : 1, o$1._xhr = {
					method: e$1.xhr && e$1.xhr.method ? e$1.xhr.method : "GET",
					headers: e$1.xhr && e$1.xhr.headers ? e$1.xhr.headers : null,
					withCredentials: !(!e$1.xhr || !e$1.xhr.withCredentials) && e$1.xhr.withCredentials
				}, o$1._duration = 0, o$1._state = "unloaded", o$1._sounds = [], o$1._endTimers = {}, o$1._queue = [], o$1._playLock = !1, o$1._onend = e$1.onend ? [{ fn: e$1.onend }] : [], o$1._onfade = e$1.onfade ? [{ fn: e$1.onfade }] : [], o$1._onload = e$1.onload ? [{ fn: e$1.onload }] : [], o$1._onloaderror = e$1.onloaderror ? [{ fn: e$1.onloaderror }] : [], o$1._onplayerror = e$1.onplayerror ? [{ fn: e$1.onplayerror }] : [], o$1._onpause = e$1.onpause ? [{ fn: e$1.onpause }] : [], o$1._onplay = e$1.onplay ? [{ fn: e$1.onplay }] : [], o$1._onstop = e$1.onstop ? [{ fn: e$1.onstop }] : [], o$1._onmute = e$1.onmute ? [{ fn: e$1.onmute }] : [], o$1._onvolume = e$1.onvolume ? [{ fn: e$1.onvolume }] : [], o$1._onrate = e$1.onrate ? [{ fn: e$1.onrate }] : [], o$1._onseek = e$1.onseek ? [{ fn: e$1.onseek }] : [], o$1._onunlock = e$1.onunlock ? [{ fn: e$1.onunlock }] : [], o$1._onresume = [], o$1._webAudio = n.usingWebAudio && !o$1._html5, void 0 !== n.ctx && n.ctx && n.autoUnlock && n._unlockAudio(), n._howls.push(o$1), o$1._autoplay && o$1._queue.push({
					event: "play",
					action: function() {
						o$1.play();
					}
				}), o$1._preload && "none" !== o$1._preload && o$1.load(), o$1;
			},
			load: function() {
				var e$1 = this, o$1 = null;
				if (n.noAudio) return void e$1._emit("loaderror", null, "No audio support.");
				"string" == typeof e$1._src && (e$1._src = [e$1._src]);
				for (var r$1 = 0; r$1 < e$1._src.length; r$1++) {
					var u$1, d$1;
					if (e$1._format && e$1._format[r$1]) u$1 = e$1._format[r$1];
					else {
						if ("string" != typeof (d$1 = e$1._src[r$1])) {
							e$1._emit("loaderror", null, "Non-string found in selected audio sources - ignoring.");
							continue;
						}
						u$1 = /^data:audio\/([^;,]+);/i.exec(d$1), u$1 || (u$1 = /\.([^.]+)$/.exec(d$1.split("?", 1)[0])), u$1 && (u$1 = u$1[1].toLowerCase());
					}
					if (u$1 || console.warn("No file extension was found. Consider using the \"format\" property or specify an extension."), u$1 && n.codecs(u$1)) {
						o$1 = e$1._src[r$1];
						break;
					}
				}
				return o$1 ? (e$1._src = o$1, e$1._state = "loading", "https:" === window.location.protocol && "http:" === o$1.slice(0, 5) && (e$1._html5 = !0, e$1._webAudio = !1), new t(e$1), e$1._webAudio && a(e$1), e$1) : void e$1._emit("loaderror", null, "No codec support for selected audio sources.");
			},
			play: function(e$1, o$1) {
				var t$1 = this, r$1 = null;
				if ("number" == typeof e$1) r$1 = e$1, e$1 = null;
				else {
					if ("string" == typeof e$1 && "loaded" === t$1._state && !t$1._sprite[e$1]) return null;
					if (void 0 === e$1 && (e$1 = "__default", !t$1._playLock)) {
						for (var a$1 = 0, u$1 = 0; u$1 < t$1._sounds.length; u$1++) t$1._sounds[u$1]._paused && !t$1._sounds[u$1]._ended && (a$1++, r$1 = t$1._sounds[u$1]._id);
						1 === a$1 ? e$1 = null : r$1 = null;
					}
				}
				var d$1 = r$1 ? t$1._soundById(r$1) : t$1._inactiveSound();
				if (!d$1) return null;
				if (r$1 && !e$1 && (e$1 = d$1._sprite || "__default"), "loaded" !== t$1._state) {
					d$1._sprite = e$1, d$1._ended = !1;
					var i$1 = d$1._id;
					return t$1._queue.push({
						event: "play",
						action: function() {
							t$1.play(i$1);
						}
					}), i$1;
				}
				if (r$1 && !d$1._paused) return o$1 || t$1._loadQueue("play"), d$1._id;
				t$1._webAudio && n._autoResume();
				var _$1 = Math.max(0, d$1._seek > 0 ? d$1._seek : t$1._sprite[e$1][0] / 1e3), s = Math.max(0, (t$1._sprite[e$1][0] + t$1._sprite[e$1][1]) / 1e3 - _$1), l = 1e3 * s / Math.abs(d$1._rate), c = t$1._sprite[e$1][0] / 1e3, f = (t$1._sprite[e$1][0] + t$1._sprite[e$1][1]) / 1e3;
				d$1._sprite = e$1, d$1._ended = !1;
				var p = function() {
					d$1._paused = !1, d$1._seek = _$1, d$1._start = c, d$1._stop = f, d$1._loop = !(!d$1._loop && !t$1._sprite[e$1][2]);
				};
				if (_$1 >= f) return void t$1._ended(d$1);
				var m = d$1._node;
				if (t$1._webAudio) {
					var v = function() {
						t$1._playLock = !1, p(), t$1._refreshBuffer(d$1);
						var e$2 = d$1._muted || t$1._muted ? 0 : d$1._volume;
						m.gain.setValueAtTime(e$2, n.ctx.currentTime), d$1._playStart = n.ctx.currentTime, void 0 === m.bufferSource.start ? d$1._loop ? m.bufferSource.noteGrainOn(0, _$1, 86400) : m.bufferSource.noteGrainOn(0, _$1, s) : d$1._loop ? m.bufferSource.start(0, _$1, 86400) : m.bufferSource.start(0, _$1, s), l !== Infinity && (t$1._endTimers[d$1._id] = setTimeout(t$1._ended.bind(t$1, d$1), l)), o$1 || setTimeout(function() {
							t$1._emit("play", d$1._id), t$1._loadQueue();
						}, 0);
					};
					"running" === n.state && "interrupted" !== n.ctx.state ? v() : (t$1._playLock = !0, t$1.once("resume", v), t$1._clearTimer(d$1._id));
				} else {
					var h = function() {
						m.currentTime = _$1, m.muted = d$1._muted || t$1._muted || n._muted || m.muted, m.volume = d$1._volume * n.volume(), m.playbackRate = d$1._rate;
						try {
							var r$2 = m.play();
							if (r$2 && "undefined" != typeof Promise && (r$2 instanceof Promise || "function" == typeof r$2.then) ? (t$1._playLock = !0, p(), r$2.then(function() {
								t$1._playLock = !1, m._unlocked = !0, o$1 ? t$1._loadQueue() : t$1._emit("play", d$1._id);
							}).catch(function() {
								t$1._playLock = !1, t$1._emit("playerror", d$1._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction."), d$1._ended = !0, d$1._paused = !0;
							})) : o$1 || (t$1._playLock = !1, p(), t$1._emit("play", d$1._id)), m.playbackRate = d$1._rate, m.paused) return void t$1._emit("playerror", d$1._id, "Playback was unable to start. This is most commonly an issue on mobile devices and Chrome where playback was not within a user interaction.");
							"__default" !== e$1 || d$1._loop ? t$1._endTimers[d$1._id] = setTimeout(t$1._ended.bind(t$1, d$1), l) : (t$1._endTimers[d$1._id] = function() {
								t$1._ended(d$1), m.removeEventListener("ended", t$1._endTimers[d$1._id], !1);
							}, m.addEventListener("ended", t$1._endTimers[d$1._id], !1));
						} catch (e$2) {
							t$1._emit("playerror", d$1._id, e$2);
						}
					};
					"data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA" === m.src && (m.src = t$1._src, m.load());
					var y = window && window.ejecta || !m.readyState && n._navigator.isCocoonJS;
					if (m.readyState >= 3 || y) h();
					else {
						t$1._playLock = !0, t$1._state = "loading";
						var g = function() {
							t$1._state = "loaded", h(), m.removeEventListener(n._canPlayEvent, g, !1);
						};
						m.addEventListener(n._canPlayEvent, g, !1), t$1._clearTimer(d$1._id);
					}
				}
				return d$1._id;
			},
			pause: function(e$1) {
				var n$1 = this;
				if ("loaded" !== n$1._state || n$1._playLock) return n$1._queue.push({
					event: "pause",
					action: function() {
						n$1.pause(e$1);
					}
				}), n$1;
				for (var o$1 = n$1._getSoundIds(e$1), t$1 = 0; t$1 < o$1.length; t$1++) {
					n$1._clearTimer(o$1[t$1]);
					var r$1 = n$1._soundById(o$1[t$1]);
					if (r$1 && !r$1._paused && (r$1._seek = n$1.seek(o$1[t$1]), r$1._rateSeek = 0, r$1._paused = !0, n$1._stopFade(o$1[t$1]), r$1._node)) if (n$1._webAudio) {
						if (!r$1._node.bufferSource) continue;
						void 0 === r$1._node.bufferSource.stop ? r$1._node.bufferSource.noteOff(0) : r$1._node.bufferSource.stop(0), n$1._cleanBuffer(r$1._node);
					} else isNaN(r$1._node.duration) && r$1._node.duration !== Infinity || r$1._node.pause();
					arguments[1] || n$1._emit("pause", r$1 ? r$1._id : null);
				}
				return n$1;
			},
			stop: function(e$1, n$1) {
				var o$1 = this;
				if ("loaded" !== o$1._state || o$1._playLock) return o$1._queue.push({
					event: "stop",
					action: function() {
						o$1.stop(e$1);
					}
				}), o$1;
				for (var t$1 = o$1._getSoundIds(e$1), r$1 = 0; r$1 < t$1.length; r$1++) {
					o$1._clearTimer(t$1[r$1]);
					var a$1 = o$1._soundById(t$1[r$1]);
					a$1 && (a$1._seek = a$1._start || 0, a$1._rateSeek = 0, a$1._paused = !0, a$1._ended = !0, o$1._stopFade(t$1[r$1]), a$1._node && (o$1._webAudio ? a$1._node.bufferSource && (void 0 === a$1._node.bufferSource.stop ? a$1._node.bufferSource.noteOff(0) : a$1._node.bufferSource.stop(0), o$1._cleanBuffer(a$1._node)) : isNaN(a$1._node.duration) && a$1._node.duration !== Infinity || (a$1._node.currentTime = a$1._start || 0, a$1._node.pause(), a$1._node.duration === Infinity && o$1._clearSound(a$1._node))), n$1 || o$1._emit("stop", a$1._id));
				}
				return o$1;
			},
			mute: function(e$1, o$1) {
				var t$1 = this;
				if ("loaded" !== t$1._state || t$1._playLock) return t$1._queue.push({
					event: "mute",
					action: function() {
						t$1.mute(e$1, o$1);
					}
				}), t$1;
				if (void 0 === o$1) {
					if ("boolean" != typeof e$1) return t$1._muted;
					t$1._muted = e$1;
				}
				for (var r$1 = t$1._getSoundIds(o$1), a$1 = 0; a$1 < r$1.length; a$1++) {
					var u$1 = t$1._soundById(r$1[a$1]);
					u$1 && (u$1._muted = e$1, u$1._interval && t$1._stopFade(u$1._id), t$1._webAudio && u$1._node ? u$1._node.gain.setValueAtTime(e$1 ? 0 : u$1._volume, n.ctx.currentTime) : u$1._node && (u$1._node.muted = !!n._muted || e$1), t$1._emit("mute", u$1._id));
				}
				return t$1;
			},
			volume: function() {
				var e$1, o$1, t$1 = this, r$1 = arguments;
				if (0 === r$1.length) return t$1._volume;
				if (1 === r$1.length || 2 === r$1.length && void 0 === r$1[1]) t$1._getSoundIds().indexOf(r$1[0]) >= 0 ? o$1 = parseInt(r$1[0], 10) : e$1 = parseFloat(r$1[0]);
				else r$1.length >= 2 && (e$1 = parseFloat(r$1[0]), o$1 = parseInt(r$1[1], 10));
				var a$1;
				if (!(void 0 !== e$1 && e$1 >= 0 && e$1 <= 1)) return a$1 = o$1 ? t$1._soundById(o$1) : t$1._sounds[0], a$1 ? a$1._volume : 0;
				if ("loaded" !== t$1._state || t$1._playLock) return t$1._queue.push({
					event: "volume",
					action: function() {
						t$1.volume.apply(t$1, r$1);
					}
				}), t$1;
				void 0 === o$1 && (t$1._volume = e$1), o$1 = t$1._getSoundIds(o$1);
				for (var u$1 = 0; u$1 < o$1.length; u$1++) (a$1 = t$1._soundById(o$1[u$1])) && (a$1._volume = e$1, r$1[2] || t$1._stopFade(o$1[u$1]), t$1._webAudio && a$1._node && !a$1._muted ? a$1._node.gain.setValueAtTime(e$1, n.ctx.currentTime) : a$1._node && !a$1._muted && (a$1._node.volume = e$1 * n.volume()), t$1._emit("volume", a$1._id));
				return t$1;
			},
			fade: function(e$1, o$1, t$1, r$1) {
				var a$1 = this;
				if ("loaded" !== a$1._state || a$1._playLock) return a$1._queue.push({
					event: "fade",
					action: function() {
						a$1.fade(e$1, o$1, t$1, r$1);
					}
				}), a$1;
				e$1 = Math.min(Math.max(0, parseFloat(e$1)), 1), o$1 = Math.min(Math.max(0, parseFloat(o$1)), 1), t$1 = parseFloat(t$1), a$1.volume(e$1, r$1);
				for (var u$1 = a$1._getSoundIds(r$1), d$1 = 0; d$1 < u$1.length; d$1++) {
					var i$1 = a$1._soundById(u$1[d$1]);
					if (i$1) {
						if (r$1 || a$1._stopFade(u$1[d$1]), a$1._webAudio && !i$1._muted) {
							var _$1 = n.ctx.currentTime, s = _$1 + t$1 / 1e3;
							i$1._volume = e$1, i$1._node.gain.setValueAtTime(e$1, _$1), i$1._node.gain.linearRampToValueAtTime(o$1, s);
						}
						a$1._startFadeInterval(i$1, e$1, o$1, t$1, u$1[d$1], void 0 === r$1);
					}
				}
				return a$1;
			},
			_startFadeInterval: function(e$1, n$1, o$1, t$1, r$1, a$1) {
				var u$1 = this, d$1 = n$1, i$1 = o$1 - n$1, _$1 = Math.abs(i$1 / .01), s = Math.max(4, _$1 > 0 ? t$1 / _$1 : t$1), l = Date.now();
				e$1._fadeTo = o$1, e$1._interval = setInterval(function() {
					var r$2 = (Date.now() - l) / t$1;
					l = Date.now(), d$1 += i$1 * r$2, d$1 = Math.round(100 * d$1) / 100, d$1 = i$1 < 0 ? Math.max(o$1, d$1) : Math.min(o$1, d$1), u$1._webAudio ? e$1._volume = d$1 : u$1.volume(d$1, e$1._id, !0), a$1 && (u$1._volume = d$1), (o$1 < n$1 && d$1 <= o$1 || o$1 > n$1 && d$1 >= o$1) && (clearInterval(e$1._interval), e$1._interval = null, e$1._fadeTo = null, u$1.volume(o$1, e$1._id), u$1._emit("fade", e$1._id));
				}, s);
			},
			_stopFade: function(e$1) {
				var o$1 = this, t$1 = o$1._soundById(e$1);
				return t$1 && t$1._interval && (o$1._webAudio && t$1._node.gain.cancelScheduledValues(n.ctx.currentTime), clearInterval(t$1._interval), t$1._interval = null, o$1.volume(t$1._fadeTo, e$1), t$1._fadeTo = null, o$1._emit("fade", e$1)), o$1;
			},
			loop: function() {
				var e$1, n$1, o$1, t$1 = this, r$1 = arguments;
				if (0 === r$1.length) return t$1._loop;
				if (1 === r$1.length) {
					if ("boolean" != typeof r$1[0]) return !!(o$1 = t$1._soundById(parseInt(r$1[0], 10))) && o$1._loop;
					e$1 = r$1[0], t$1._loop = e$1;
				} else 2 === r$1.length && (e$1 = r$1[0], n$1 = parseInt(r$1[1], 10));
				for (var a$1 = t$1._getSoundIds(n$1), u$1 = 0; u$1 < a$1.length; u$1++) (o$1 = t$1._soundById(a$1[u$1])) && (o$1._loop = e$1, t$1._webAudio && o$1._node && o$1._node.bufferSource && (o$1._node.bufferSource.loop = e$1, e$1 && (o$1._node.bufferSource.loopStart = o$1._start || 0, o$1._node.bufferSource.loopEnd = o$1._stop, t$1.playing(a$1[u$1]) && (t$1.pause(a$1[u$1], !0), t$1.play(a$1[u$1], !0)))));
				return t$1;
			},
			rate: function() {
				var e$1, o$1, t$1 = this, r$1 = arguments;
				if (0 === r$1.length) o$1 = t$1._sounds[0]._id;
				else if (1 === r$1.length) t$1._getSoundIds().indexOf(r$1[0]) >= 0 ? o$1 = parseInt(r$1[0], 10) : e$1 = parseFloat(r$1[0]);
				else 2 === r$1.length && (e$1 = parseFloat(r$1[0]), o$1 = parseInt(r$1[1], 10));
				var d$1;
				if ("number" != typeof e$1) return d$1 = t$1._soundById(o$1), d$1 ? d$1._rate : t$1._rate;
				if ("loaded" !== t$1._state || t$1._playLock) return t$1._queue.push({
					event: "rate",
					action: function() {
						t$1.rate.apply(t$1, r$1);
					}
				}), t$1;
				void 0 === o$1 && (t$1._rate = e$1), o$1 = t$1._getSoundIds(o$1);
				for (var i$1 = 0; i$1 < o$1.length; i$1++) if (d$1 = t$1._soundById(o$1[i$1])) {
					t$1.playing(o$1[i$1]) && (d$1._rateSeek = t$1.seek(o$1[i$1]), d$1._playStart = t$1._webAudio ? n.ctx.currentTime : d$1._playStart), d$1._rate = e$1, t$1._webAudio && d$1._node && d$1._node.bufferSource ? d$1._node.bufferSource.playbackRate.setValueAtTime(e$1, n.ctx.currentTime) : d$1._node && (d$1._node.playbackRate = e$1);
					var _$1 = t$1.seek(o$1[i$1]), l = 1e3 * ((t$1._sprite[d$1._sprite][0] + t$1._sprite[d$1._sprite][1]) / 1e3 - _$1) / Math.abs(d$1._rate);
					!t$1._endTimers[o$1[i$1]] && d$1._paused || (t$1._clearTimer(o$1[i$1]), t$1._endTimers[o$1[i$1]] = setTimeout(t$1._ended.bind(t$1, d$1), l)), t$1._emit("rate", d$1._id);
				}
				return t$1;
			},
			seek: function() {
				var e$1, o$1, t$1 = this, r$1 = arguments;
				if (0 === r$1.length) t$1._sounds.length && (o$1 = t$1._sounds[0]._id);
				else if (1 === r$1.length) t$1._getSoundIds().indexOf(r$1[0]) >= 0 ? o$1 = parseInt(r$1[0], 10) : t$1._sounds.length && (o$1 = t$1._sounds[0]._id, e$1 = parseFloat(r$1[0]));
				else 2 === r$1.length && (e$1 = parseFloat(r$1[0]), o$1 = parseInt(r$1[1], 10));
				if (void 0 === o$1) return 0;
				if ("number" == typeof e$1 && ("loaded" !== t$1._state || t$1._playLock)) return t$1._queue.push({
					event: "seek",
					action: function() {
						t$1.seek.apply(t$1, r$1);
					}
				}), t$1;
				var d$1 = t$1._soundById(o$1);
				if (d$1) {
					if (!("number" == typeof e$1 && e$1 >= 0)) {
						if (t$1._webAudio) {
							var i$1 = t$1.playing(o$1) ? n.ctx.currentTime - d$1._playStart : 0, _$1 = d$1._rateSeek ? d$1._rateSeek - d$1._seek : 0;
							return d$1._seek + (_$1 + i$1 * Math.abs(d$1._rate));
						}
						return d$1._node.currentTime;
					}
					var s = t$1.playing(o$1);
					s && t$1.pause(o$1, !0), d$1._seek = e$1, d$1._ended = !1, t$1._clearTimer(o$1), t$1._webAudio || !d$1._node || isNaN(d$1._node.duration) || (d$1._node.currentTime = e$1);
					var l = function() {
						s && t$1.play(o$1, !0), t$1._emit("seek", o$1);
					};
					if (s && !t$1._webAudio) {
						var c = function() {
							t$1._playLock ? setTimeout(c, 0) : l();
						};
						setTimeout(c, 0);
					} else l();
				}
				return t$1;
			},
			playing: function(e$1) {
				var n$1 = this;
				if ("number" == typeof e$1) {
					var o$1 = n$1._soundById(e$1);
					return !!o$1 && !o$1._paused;
				}
				for (var t$1 = 0; t$1 < n$1._sounds.length; t$1++) if (!n$1._sounds[t$1]._paused) return !0;
				return !1;
			},
			duration: function(e$1) {
				var n$1 = this, o$1 = n$1._duration, t$1 = n$1._soundById(e$1);
				return t$1 && (o$1 = n$1._sprite[t$1._sprite][1] / 1e3), o$1;
			},
			state: function() {
				return this._state;
			},
			unload: function() {
				for (var e$1 = this, o$1 = e$1._sounds, t$1 = 0; t$1 < o$1.length; t$1++) o$1[t$1]._paused || e$1.stop(o$1[t$1]._id), e$1._webAudio || (e$1._clearSound(o$1[t$1]._node), o$1[t$1]._node.removeEventListener("error", o$1[t$1]._errorFn, !1), o$1[t$1]._node.removeEventListener(n._canPlayEvent, o$1[t$1]._loadFn, !1), o$1[t$1]._node.removeEventListener("ended", o$1[t$1]._endFn, !1), n._releaseHtml5Audio(o$1[t$1]._node)), delete o$1[t$1]._node, e$1._clearTimer(o$1[t$1]._id);
				var a$1 = n._howls.indexOf(e$1);
				a$1 >= 0 && n._howls.splice(a$1, 1);
				var u$1 = !0;
				for (t$1 = 0; t$1 < n._howls.length; t$1++) if (n._howls[t$1]._src === e$1._src || e$1._src.indexOf(n._howls[t$1]._src) >= 0) {
					u$1 = !1;
					break;
				}
				return r && u$1 && delete r[e$1._src], n.noAudio = !1, e$1._state = "unloaded", e$1._sounds = [], e$1 = null, null;
			},
			on: function(e$1, n$1, o$1, t$1) {
				var r$1 = this, a$1 = r$1["_on" + e$1];
				return "function" == typeof n$1 && a$1.push(t$1 ? {
					id: o$1,
					fn: n$1,
					once: t$1
				} : {
					id: o$1,
					fn: n$1
				}), r$1;
			},
			off: function(e$1, n$1, o$1) {
				var t$1 = this, r$1 = t$1["_on" + e$1], a$1 = 0;
				if ("number" == typeof n$1 && (o$1 = n$1, n$1 = null), n$1 || o$1) for (a$1 = 0; a$1 < r$1.length; a$1++) {
					var u$1 = o$1 === r$1[a$1].id;
					if (n$1 === r$1[a$1].fn && u$1 || !n$1 && u$1) {
						r$1.splice(a$1, 1);
						break;
					}
				}
				else if (e$1) t$1["_on" + e$1] = [];
				else {
					var d$1 = Object.keys(t$1);
					for (a$1 = 0; a$1 < d$1.length; a$1++) 0 === d$1[a$1].indexOf("_on") && Array.isArray(t$1[d$1[a$1]]) && (t$1[d$1[a$1]] = []);
				}
				return t$1;
			},
			once: function(e$1, n$1, o$1) {
				var t$1 = this;
				return t$1.on(e$1, n$1, o$1, 1), t$1;
			},
			_emit: function(e$1, n$1, o$1) {
				for (var t$1 = this, r$1 = t$1["_on" + e$1], a$1 = r$1.length - 1; a$1 >= 0; a$1--) r$1[a$1].id && r$1[a$1].id !== n$1 && "load" !== e$1 || (setTimeout(function(e$2) {
					e$2.call(this, n$1, o$1);
				}.bind(t$1, r$1[a$1].fn), 0), r$1[a$1].once && t$1.off(e$1, r$1[a$1].fn, r$1[a$1].id));
				return t$1._loadQueue(e$1), t$1;
			},
			_loadQueue: function(e$1) {
				var n$1 = this;
				if (n$1._queue.length > 0) {
					var o$1 = n$1._queue[0];
					o$1.event === e$1 && (n$1._queue.shift(), n$1._loadQueue()), e$1 || o$1.action();
				}
				return n$1;
			},
			_ended: function(e$1) {
				var o$1 = this, t$1 = e$1._sprite;
				if (!o$1._webAudio && e$1._node && !e$1._node.paused && !e$1._node.ended && e$1._node.currentTime < e$1._stop) return setTimeout(o$1._ended.bind(o$1, e$1), 100), o$1;
				var r$1 = !(!e$1._loop && !o$1._sprite[t$1][2]);
				if (o$1._emit("end", e$1._id), !o$1._webAudio && r$1 && o$1.stop(e$1._id, !0).play(e$1._id), o$1._webAudio && r$1) {
					o$1._emit("play", e$1._id), e$1._seek = e$1._start || 0, e$1._rateSeek = 0, e$1._playStart = n.ctx.currentTime;
					var a$1 = 1e3 * (e$1._stop - e$1._start) / Math.abs(e$1._rate);
					o$1._endTimers[e$1._id] = setTimeout(o$1._ended.bind(o$1, e$1), a$1);
				}
				return o$1._webAudio && !r$1 && (e$1._paused = !0, e$1._ended = !0, e$1._seek = e$1._start || 0, e$1._rateSeek = 0, o$1._clearTimer(e$1._id), o$1._cleanBuffer(e$1._node), n._autoSuspend()), o$1._webAudio || r$1 || o$1.stop(e$1._id, !0), o$1;
			},
			_clearTimer: function(e$1) {
				var n$1 = this;
				if (n$1._endTimers[e$1]) {
					if ("function" != typeof n$1._endTimers[e$1]) clearTimeout(n$1._endTimers[e$1]);
					else {
						var o$1 = n$1._soundById(e$1);
						o$1 && o$1._node && o$1._node.removeEventListener("ended", n$1._endTimers[e$1], !1);
					}
					delete n$1._endTimers[e$1];
				}
				return n$1;
			},
			_soundById: function(e$1) {
				for (var n$1 = this, o$1 = 0; o$1 < n$1._sounds.length; o$1++) if (e$1 === n$1._sounds[o$1]._id) return n$1._sounds[o$1];
				return null;
			},
			_inactiveSound: function() {
				var e$1 = this;
				e$1._drain();
				for (var n$1 = 0; n$1 < e$1._sounds.length; n$1++) if (e$1._sounds[n$1]._ended) return e$1._sounds[n$1].reset();
				return new t(e$1);
			},
			_drain: function() {
				var e$1 = this, n$1 = e$1._pool, o$1 = 0, t$1 = 0;
				if (!(e$1._sounds.length < n$1)) {
					for (t$1 = 0; t$1 < e$1._sounds.length; t$1++) e$1._sounds[t$1]._ended && o$1++;
					for (t$1 = e$1._sounds.length - 1; t$1 >= 0; t$1--) {
						if (o$1 <= n$1) return;
						e$1._sounds[t$1]._ended && (e$1._webAudio && e$1._sounds[t$1]._node && e$1._sounds[t$1]._node.disconnect(0), e$1._sounds.splice(t$1, 1), o$1--);
					}
				}
			},
			_getSoundIds: function(e$1) {
				var n$1 = this;
				if (void 0 === e$1) {
					for (var o$1 = [], t$1 = 0; t$1 < n$1._sounds.length; t$1++) o$1.push(n$1._sounds[t$1]._id);
					return o$1;
				}
				return [e$1];
			},
			_refreshBuffer: function(e$1) {
				var o$1 = this;
				return e$1._node.bufferSource = n.ctx.createBufferSource(), e$1._node.bufferSource.buffer = r[o$1._src], e$1._panner ? e$1._node.bufferSource.connect(e$1._panner) : e$1._node.bufferSource.connect(e$1._node), e$1._node.bufferSource.loop = e$1._loop, e$1._loop && (e$1._node.bufferSource.loopStart = e$1._start || 0, e$1._node.bufferSource.loopEnd = e$1._stop || 0), e$1._node.bufferSource.playbackRate.setValueAtTime(e$1._rate, n.ctx.currentTime), o$1;
			},
			_cleanBuffer: function(e$1) {
				var o$1 = this, t$1 = n._navigator && n._navigator.vendor.indexOf("Apple") >= 0;
				if (n._scratchBuffer && e$1.bufferSource && (e$1.bufferSource.onended = null, e$1.bufferSource.disconnect(0), t$1)) try {
					e$1.bufferSource.buffer = n._scratchBuffer;
				} catch (e$2) {}
				return e$1.bufferSource = null, o$1;
			},
			_clearSound: function(e$1) {
				/MSIE |Trident\//.test(n._navigator && n._navigator.userAgent) || (e$1.src = "data:audio/wav;base64,UklGRigAAABXQVZFZm10IBIAAAABAAEARKwAAIhYAQACABAAAABkYXRhAgAAAAEA");
			}
		};
		var t = function(e$1) {
			this._parent = e$1, this.init();
		};
		t.prototype = {
			init: function() {
				var e$1 = this, o$1 = e$1._parent;
				return e$1._muted = o$1._muted, e$1._loop = o$1._loop, e$1._volume = o$1._volume, e$1._rate = o$1._rate, e$1._seek = 0, e$1._paused = !0, e$1._ended = !0, e$1._sprite = "__default", e$1._id = ++n._counter, o$1._sounds.push(e$1), e$1.create(), e$1;
			},
			create: function() {
				var e$1 = this, o$1 = e$1._parent, t$1 = n._muted || e$1._muted || e$1._parent._muted ? 0 : e$1._volume;
				return o$1._webAudio ? (e$1._node = void 0 === n.ctx.createGain ? n.ctx.createGainNode() : n.ctx.createGain(), e$1._node.gain.setValueAtTime(t$1, n.ctx.currentTime), e$1._node.paused = !0, e$1._node.connect(n.masterGain)) : n.noAudio || (e$1._node = n._obtainHtml5Audio(), e$1._errorFn = e$1._errorListener.bind(e$1), e$1._node.addEventListener("error", e$1._errorFn, !1), e$1._loadFn = e$1._loadListener.bind(e$1), e$1._node.addEventListener(n._canPlayEvent, e$1._loadFn, !1), e$1._endFn = e$1._endListener.bind(e$1), e$1._node.addEventListener("ended", e$1._endFn, !1), e$1._node.src = o$1._src, e$1._node.preload = !0 === o$1._preload ? "auto" : o$1._preload, e$1._node.volume = t$1 * n.volume(), e$1._node.load()), e$1;
			},
			reset: function() {
				var e$1 = this, o$1 = e$1._parent;
				return e$1._muted = o$1._muted, e$1._loop = o$1._loop, e$1._volume = o$1._volume, e$1._rate = o$1._rate, e$1._seek = 0, e$1._rateSeek = 0, e$1._paused = !0, e$1._ended = !0, e$1._sprite = "__default", e$1._id = ++n._counter, e$1;
			},
			_errorListener: function() {
				var e$1 = this;
				e$1._parent._emit("loaderror", e$1._id, e$1._node.error ? e$1._node.error.code : 0), e$1._node.removeEventListener("error", e$1._errorFn, !1);
			},
			_loadListener: function() {
				var e$1 = this, o$1 = e$1._parent;
				o$1._duration = Math.ceil(10 * e$1._node.duration) / 10, 0 === Object.keys(o$1._sprite).length && (o$1._sprite = { __default: [0, 1e3 * o$1._duration] }), "loaded" !== o$1._state && (o$1._state = "loaded", o$1._emit("load"), o$1._loadQueue()), e$1._node.removeEventListener(n._canPlayEvent, e$1._loadFn, !1);
			},
			_endListener: function() {
				var e$1 = this, n$1 = e$1._parent;
				n$1._duration === Infinity && (n$1._duration = Math.ceil(10 * e$1._node.duration) / 10, n$1._sprite.__default[1] === Infinity && (n$1._sprite.__default[1] = 1e3 * n$1._duration), n$1._ended(e$1)), e$1._node.removeEventListener("ended", e$1._endFn, !1);
			}
		};
		var r = {}, a = function(e$1) {
			var n$1 = e$1._src;
			if (r[n$1]) return e$1._duration = r[n$1].duration, void i(e$1);
			if (/^data:[^;]+;base64,/.test(n$1)) {
				for (var o$1 = atob(n$1.split(",")[1]), t$1 = new Uint8Array(o$1.length), a$1 = 0; a$1 < o$1.length; ++a$1) t$1[a$1] = o$1.charCodeAt(a$1);
				d(t$1.buffer, e$1);
			} else {
				var _$1 = new XMLHttpRequest();
				_$1.open(e$1._xhr.method, n$1, !0), _$1.withCredentials = e$1._xhr.withCredentials, _$1.responseType = "arraybuffer", e$1._xhr.headers && Object.keys(e$1._xhr.headers).forEach(function(n$2) {
					_$1.setRequestHeader(n$2, e$1._xhr.headers[n$2]);
				}), _$1.onload = function() {
					var n$2 = (_$1.status + "")[0];
					if ("0" !== n$2 && "2" !== n$2 && "3" !== n$2) return void e$1._emit("loaderror", null, "Failed loading audio file with status: " + _$1.status + ".");
					d(_$1.response, e$1);
				}, _$1.onerror = function() {
					e$1._webAudio && (e$1._html5 = !0, e$1._webAudio = !1, e$1._sounds = [], delete r[n$1], e$1.load());
				}, u(_$1);
			}
		}, u = function(e$1) {
			try {
				e$1.send();
			} catch (n$1) {
				e$1.onerror();
			}
		}, d = function(e$1, o$1) {
			var t$1 = function() {
				o$1._emit("loaderror", null, "Decoding audio data failed.");
			}, a$1 = function(e$2) {
				e$2 && o$1._sounds.length > 0 ? (r[o$1._src] = e$2, i(o$1, e$2)) : t$1();
			};
			"undefined" != typeof Promise && 1 === n.ctx.decodeAudioData.length ? n.ctx.decodeAudioData(e$1).then(a$1).catch(t$1) : n.ctx.decodeAudioData(e$1, a$1, t$1);
		}, i = function(e$1, n$1) {
			n$1 && !e$1._duration && (e$1._duration = n$1.duration), 0 === Object.keys(e$1._sprite).length && (e$1._sprite = { __default: [0, 1e3 * e$1._duration] }), "loaded" !== e$1._state && (e$1._state = "loaded", e$1._emit("load"), e$1._loadQueue());
		}, _ = function() {
			if (n.usingWebAudio) {
				try {
					"undefined" != typeof AudioContext ? n.ctx = new AudioContext() : "undefined" != typeof webkitAudioContext ? n.ctx = new webkitAudioContext() : n.usingWebAudio = !1;
				} catch (e$2) {
					n.usingWebAudio = !1;
				}
				n.ctx || (n.usingWebAudio = !1);
				var e$1 = /iP(hone|od|ad)/.test(n._navigator && n._navigator.platform), o$1 = n._navigator && n._navigator.appVersion.match(/OS (\d+)_(\d+)_?(\d+)?/), t$1 = o$1 ? parseInt(o$1[1], 10) : null;
				if (e$1 && t$1 && t$1 < 9) {
					var r$1 = /safari/.test(n._navigator && n._navigator.userAgent.toLowerCase());
					n._navigator && !r$1 && (n.usingWebAudio = !1);
				}
				n.usingWebAudio && (n.masterGain = void 0 === n.ctx.createGain ? n.ctx.createGainNode() : n.ctx.createGain(), n.masterGain.gain.setValueAtTime(n._muted ? 0 : n._volume, n.ctx.currentTime), n.masterGain.connect(n.ctx.destination)), n._setup();
			}
		};
		"function" == typeof define && define.amd && define([], function() {
			return {
				Howler: n,
				Howl: o
			};
		}), "undefined" != typeof exports && (exports.Howler = n, exports.Howl = o), "undefined" != typeof global ? (global.HowlerGlobal = e, global.Howler = n, global.Howl = o, global.Sound = t) : "undefined" != typeof window && (window.HowlerGlobal = e, window.Howler = n, window.Howl = o, window.Sound = t);
	})();
}) });

//#endregion
export default require_howler();

//# sourceMappingURL=howler-102Rn0os.js.map